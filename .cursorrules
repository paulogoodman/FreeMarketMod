# NeoForge 21.1.209 Mod Development Rules

## Project Overview
This is a NeoForge 21.1.209 Minecraft mod development project using ModDevGradle plugin version 2.0.112.

## Project Structure
```
src/main/java/com/servershop/
├── ServerShop.java          # Main mod class with blocks, items, and creative tabs
├── ServerShopClient.java    # Client-side mod class
└── Config.java              # Configuration system

src/main/resources/
├── META-INF/
│   └── neoforge.mods.toml   # Mod metadata (generated from templates)
└── assets/servershop/       # Mod assets (textures, models, etc.)

src/main/templates/
└── META-INF/
    └── neoforge.mods.toml   # Mod metadata template
```

## Build Configuration

### Gradle Files
- `build.gradle` - Main build configuration with ModDevGradle plugin
- `gradle.properties` - Project properties and mod metadata
- `gradlew.bat` - Gradle wrapper for Windows
- `gradle/wrapper/` - Gradle wrapper files

### Key Properties (gradle.properties)
```properties
minecraft_version=1.21.1
neo_version=21.1.209
loader_version_range=[4.0,5.0)
mod_id=servershop
mod_group_id=com.servershop
mod_name=ServerShop
```

## Build Commands

### Essential Commands
```bash
# Clean and build the mod
.\gradlew.bat clean build

# Build only (without clean)
.\gradlew.bat build

# Run client for testing
.\gradlew.bat runClient

# Run server for testing
.\gradlew.bat runServer

# Generate IDE run configurations
.\gradlew.bat genIntellijRuns
.\gradlew.bat genEclipseRuns
```

### Development Workflow
1. **Build**: `.\gradlew.bat build` - Compiles mod to `build/libs/servershop-1.0.0.jar`
2. **Test**: `.\gradlew.bat runClient` - Launches Minecraft with mod loaded
3. **Debug**: Use IDE run configurations or attach debugger to running client
4. **Package**: Built JAR is ready for distribution

## Code Guidelines

### Package Structure
- Use `com.servershop` as the base package
- Follow Java naming conventions
- Keep client-side code in `ServerShopClient.java`
- Keep common/server-side code in `ServerShop.java`

### Mod Development Patterns
```java
// Main mod class annotation
@Mod(ServerShop.MODID)
public class ServerShop {
    public static final String MODID = "servershop";
    public static final Logger LOGGER = LogUtils.getLogger();
    
    // Deferred registers for blocks, items, etc.
    public static final DeferredRegister.Blocks BLOCKS = DeferredRegister.createBlocks(MODID);
    public static final DeferredRegister.Items ITEMS = DeferredRegister.createItems(MODID);
}

// Client-side class annotation
@Mod(value = ServerShop.MODID, dist = Dist.CLIENT)
@EventBusSubscriber(modid = ServerShop.MODID, value = Dist.CLIENT)
public class ServerShopClient {
    // Client-only code here
}
```

### Event Handling
```java
// Subscribe to mod events
@SubscribeEvent
static void onClientSetup(FMLClientSetupEvent event) {
    // Client setup code
}

// Subscribe to game events
@SubscribeEvent
public void onServerStarting(ServerStartingEvent event) {
    // Server starting code
}
```

### Resource Management
- Place textures in `src/main/resources/assets/servershop/textures/`
- Place models in `src/main/resources/assets/servershop/models/`
- Place blockstates in `src/main/resources/assets/servershop/blockstates/`
- Place language files in `src/main/resources/assets/servershop/lang/`

## Dependencies

### Core Dependencies
- NeoForge 21.1.209
- Minecraft 1.21.1
- Java 21 (required)

### Adding Dependencies
```gradle
dependencies {
    // Example: JEI integration
    compileOnly "mezz.jei:jei-${mc_version}-common-api:${jei_version}"
    compileOnly "mezz.jei:jei-${mc_version}-neoforge-api:${jei_version}"
    localRuntime "mezz.jei:jei-${mc_version}-neoforge:${jei_version}"
}
```

## Configuration

### Mod Configuration
- Configuration is handled in `Config.java`
- Config files are automatically generated in `run/config/`
- Use `ModConfigSpec` for type-safe configuration

### Example Configuration
```java
public static final ModConfigSpec.BooleanValue LOG_DIRT_BLOCK = BUILDER
    .comment("Whether to log the dirt block on common setup")
    .define("logDirtBlock", true);
```

## Troubleshooting

### Common Issues
1. **Loader Version Error**: Ensure `loader_version_range=[4.0,5.0)` in gradle.properties
2. **Build Failures**: Run `.\gradlew.bat clean build` to clear cache
3. **Client Won't Start**: Check for missing resources or incorrect mod metadata
4. **File Lock Errors**: Stop running Minecraft instances before cleaning

### Debug Information
- Check `run/logs/latest.log` for detailed error information
- Use `ServerShop.LOGGER.info()` for debugging output
- Enable debug logging in gradle.properties if needed

## Development Tips

### Performance
- Use deferred registers for all game objects
- Avoid expensive operations in constructors
- Use appropriate event bus subscriptions

### Best Practices
- Always test on both client and server
- Use proper null checks and error handling
- Follow Minecraft's naming conventions
- Document your code with meaningful comments

### Testing
- Test mod in both single-player and multiplayer
- Verify compatibility with other mods
- Test configuration changes
- Validate resource loading

## File Locations
- **Built Mod**: `build/libs/servershop-1.0.0.jar`
- **Run Directory**: `run/` (Minecraft instance)
- **Logs**: `run/logs/latest.log`
- **Config**: `run/config/servershop-common.toml`

## IDE Integration
- Import as Gradle project
- Use generated run configurations for debugging
- Enable auto-import for Gradle changes
- Configure code formatting for Java 21

Remember: Always test your changes by running `.\gradlew.bat runClient` after making modifications!
